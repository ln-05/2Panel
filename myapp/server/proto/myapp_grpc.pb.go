// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: myapp.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Myapp_Ping_FullMethodName               = "/myapp.Myapp/Ping"
	Myapp_DatabaseSync_FullMethodName       = "/myapp.Myapp/DatabaseSync"
	Myapp_RemoteDatabaseList_FullMethodName = "/myapp.Myapp/RemoteDatabaseList"
	Myapp_DatabaseCreate_FullMethodName     = "/myapp.Myapp/DatabaseCreate"
	Myapp_DatabaseTest_FullMethodName       = "/myapp.Myapp/DatabaseTest"
	Myapp_DatabaseList_FullMethodName       = "/myapp.Myapp/DatabaseList"
	Myapp_DatabaseUpdate_FullMethodName     = "/myapp.Myapp/DatabaseUpdate"
	Myapp_DatabaseDelete_FullMethodName     = "/myapp.Myapp/DatabaseDelete"
	Myapp_DatabaseGet_FullMethodName        = "/myapp.Myapp/DatabaseGet"
)

// MyappClient is the client API for Myapp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MyappClient interface {
	Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	DatabaseSync(ctx context.Context, in *DatabaseSyncRequest, opts ...grpc.CallOption) (*DatabaseSyncResponse, error)
	RemoteDatabaseList(ctx context.Context, in *RemoteDatabaseListRequest, opts ...grpc.CallOption) (*RemoteDatabaseListResponse, error)
	DatabaseCreate(ctx context.Context, in *DatabaseCreateRequest, opts ...grpc.CallOption) (*DatabaseCreateResponse, error)
	DatabaseTest(ctx context.Context, in *DatabaseTestRequest, opts ...grpc.CallOption) (*DatabaseTestResponse, error)
	DatabaseList(ctx context.Context, in *DatabaseListRequest, opts ...grpc.CallOption) (*DatabaseListResponse, error)
	DatabaseUpdate(ctx context.Context, in *DatabaseUpdateRequest, opts ...grpc.CallOption) (*DatabaseUpdateResponse, error)
	DatabaseDelete(ctx context.Context, in *DatabaseDeleteRequest, opts ...grpc.CallOption) (*DatabaseDeleteResponse, error)
	DatabaseGet(ctx context.Context, in *DatabaseGetRequest, opts ...grpc.CallOption) (*DatabaseGetResponse, error)
}

type myappClient struct {
	cc grpc.ClientConnInterface
}

func NewMyappClient(cc grpc.ClientConnInterface) MyappClient {
	return &myappClient{cc}
}

func (c *myappClient) Ping(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Myapp_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseSync(ctx context.Context, in *DatabaseSyncRequest, opts ...grpc.CallOption) (*DatabaseSyncResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseSyncResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseSync_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) RemoteDatabaseList(ctx context.Context, in *RemoteDatabaseListRequest, opts ...grpc.CallOption) (*RemoteDatabaseListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoteDatabaseListResponse)
	err := c.cc.Invoke(ctx, Myapp_RemoteDatabaseList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseCreate(ctx context.Context, in *DatabaseCreateRequest, opts ...grpc.CallOption) (*DatabaseCreateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseCreateResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseTest(ctx context.Context, in *DatabaseTestRequest, opts ...grpc.CallOption) (*DatabaseTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseTestResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseList(ctx context.Context, in *DatabaseListRequest, opts ...grpc.CallOption) (*DatabaseListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseListResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseUpdate(ctx context.Context, in *DatabaseUpdateRequest, opts ...grpc.CallOption) (*DatabaseUpdateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseUpdateResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseDelete(ctx context.Context, in *DatabaseDeleteRequest, opts ...grpc.CallOption) (*DatabaseDeleteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseDeleteResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappClient) DatabaseGet(ctx context.Context, in *DatabaseGetRequest, opts ...grpc.CallOption) (*DatabaseGetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DatabaseGetResponse)
	err := c.cc.Invoke(ctx, Myapp_DatabaseGet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MyappServer is the server API for Myapp service.
// All implementations must embed UnimplementedMyappServer
// for forward compatibility.
type MyappServer interface {
	Ping(context.Context, *Request) (*Response, error)
	DatabaseSync(context.Context, *DatabaseSyncRequest) (*DatabaseSyncResponse, error)
	RemoteDatabaseList(context.Context, *RemoteDatabaseListRequest) (*RemoteDatabaseListResponse, error)
	DatabaseCreate(context.Context, *DatabaseCreateRequest) (*DatabaseCreateResponse, error)
	DatabaseTest(context.Context, *DatabaseTestRequest) (*DatabaseTestResponse, error)
	DatabaseList(context.Context, *DatabaseListRequest) (*DatabaseListResponse, error)
	DatabaseUpdate(context.Context, *DatabaseUpdateRequest) (*DatabaseUpdateResponse, error)
	DatabaseDelete(context.Context, *DatabaseDeleteRequest) (*DatabaseDeleteResponse, error)
	DatabaseGet(context.Context, *DatabaseGetRequest) (*DatabaseGetResponse, error)
	mustEmbedUnimplementedMyappServer()
}

// UnimplementedMyappServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMyappServer struct{}

func (UnimplementedMyappServer) Ping(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMyappServer) DatabaseSync(context.Context, *DatabaseSyncRequest) (*DatabaseSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseSync not implemented")
}
func (UnimplementedMyappServer) RemoteDatabaseList(context.Context, *RemoteDatabaseListRequest) (*RemoteDatabaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteDatabaseList not implemented")
}
func (UnimplementedMyappServer) DatabaseCreate(context.Context, *DatabaseCreateRequest) (*DatabaseCreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseCreate not implemented")
}
func (UnimplementedMyappServer) DatabaseTest(context.Context, *DatabaseTestRequest) (*DatabaseTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseTest not implemented")
}
func (UnimplementedMyappServer) DatabaseList(context.Context, *DatabaseListRequest) (*DatabaseListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseList not implemented")
}
func (UnimplementedMyappServer) DatabaseUpdate(context.Context, *DatabaseUpdateRequest) (*DatabaseUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseUpdate not implemented")
}
func (UnimplementedMyappServer) DatabaseDelete(context.Context, *DatabaseDeleteRequest) (*DatabaseDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseDelete not implemented")
}
func (UnimplementedMyappServer) DatabaseGet(context.Context, *DatabaseGetRequest) (*DatabaseGetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DatabaseGet not implemented")
}
func (UnimplementedMyappServer) mustEmbedUnimplementedMyappServer() {}
func (UnimplementedMyappServer) testEmbeddedByValue()               {}

// UnsafeMyappServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MyappServer will
// result in compilation errors.
type UnsafeMyappServer interface {
	mustEmbedUnimplementedMyappServer()
}

func RegisterMyappServer(s grpc.ServiceRegistrar, srv MyappServer) {
	// If the following call pancis, it indicates UnimplementedMyappServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Myapp_ServiceDesc, srv)
}

func _Myapp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).Ping(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseSync(ctx, req.(*DatabaseSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_RemoteDatabaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoteDatabaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).RemoteDatabaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_RemoteDatabaseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).RemoteDatabaseList(ctx, req.(*RemoteDatabaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseCreate(ctx, req.(*DatabaseCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseTest(ctx, req.(*DatabaseTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseList(ctx, req.(*DatabaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseUpdate(ctx, req.(*DatabaseUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseDelete(ctx, req.(*DatabaseDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myapp_DatabaseGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DatabaseGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappServer).DatabaseGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Myapp_DatabaseGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappServer).DatabaseGet(ctx, req.(*DatabaseGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Myapp_ServiceDesc is the grpc.ServiceDesc for Myapp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Myapp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myapp.Myapp",
	HandlerType: (*MyappServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Myapp_Ping_Handler,
		},
		{
			MethodName: "DatabaseSync",
			Handler:    _Myapp_DatabaseSync_Handler,
		},
		{
			MethodName: "RemoteDatabaseList",
			Handler:    _Myapp_RemoteDatabaseList_Handler,
		},
		{
			MethodName: "DatabaseCreate",
			Handler:    _Myapp_DatabaseCreate_Handler,
		},
		{
			MethodName: "DatabaseTest",
			Handler:    _Myapp_DatabaseTest_Handler,
		},
		{
			MethodName: "DatabaseList",
			Handler:    _Myapp_DatabaseList_Handler,
		},
		{
			MethodName: "DatabaseUpdate",
			Handler:    _Myapp_DatabaseUpdate_Handler,
		},
		{
			MethodName: "DatabaseDelete",
			Handler:    _Myapp_DatabaseDelete_Handler,
		},
		{
			MethodName: "DatabaseGet",
			Handler:    _Myapp_DatabaseGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "myapp.proto",
}
